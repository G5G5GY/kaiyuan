package cn.hippo4j.common.design.builder;

import cn.hippo4j.common.design.builder.ThreadFactoryBuilder;
import org.junit.Assert;
import org.junit.Test;

import java.util.concurrent.ThreadFactory;
import java.lang.Thread.UncaughtExceptionHandler;

public class ThreadFactoryBuilderTest {

    ThreadFactoryBuilder builder;
    TestUncaughtExceptionHandler uncaughtExceptionHandler;
    Thread thread;

    public void buildThread() {
        builder = ThreadFactoryBuilder.builder();
        uncaughtExceptionHandler = new TestUncaughtExceptionHandler();
        builder.uncaughtExceptionHandler(uncaughtExceptionHandler);
        builder.prefix("my-thread-factory");
        builder.daemon(true);
        builder.priority(Thread.MAX_PRIORITY);
        ThreadFactory threadFactory = builder.build();
        thread = threadFactory.newThread(() -> {
            System.out.println("Create a new thread.");
        });
        thread.start();
    }

    @Test
    public void testName() {
        buildThread();
        Assert.assertEquals("my-thread-factory_0", thread.getName());
    }

    @Test
    public void testIsDaemon() {
        buildThread();
        Assert.assertTrue(thread.isDaemon());
    }

    @Test
    public void testExceptionHandler() {
        buildThread();
        Assert.assertEquals(uncaughtExceptionHandler, thread.getUncaughtExceptionHandler());

    }

    @Test
    public void testPriority() {
        buildThread();
        Assert.assertEquals(Thread.MAX_PRIORITY, thread.getPriority());
    }

}

class TestUncaughtExceptionHandler implements UncaughtExceptionHandler {

    private volatile boolean exceptionCaught = false;

    @Override
    public void uncaughtException(Thread t, Throwable e) {
        System.out.println("Exception caught by " + t.getName());
        exceptionCaught = true;
    }

    public boolean isExceptionCaught() {
        return exceptionCaught;
    }
}

